{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/countdown_phases/PomodoroBreakInProgress.js\";\nimport React, { useEffect } from 'react';\nimport PomodoRoTimer from \"../../pomodorotimer/pomodoroTimer\";\nimport CacheCleaner from '../../../../helperfunctions/CacheCleaner';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PomodoroBreakInProgress = props => {\n  const stopCurrentSession = nextStateName => {\n    props.changePomodoroViewState(props.nextStateName);\n  };\n\n  const pomodoroTimerKiller = nextStateName => {\n    props.changePomodoroViewState(props.nextStateName);\n    CacheCleaner([\"minutes\", \"seconds\", \"hours\"]);\n  };\n\n  if (props.numberofsessions % props.settings.frequencyLongBreakDefaultplusCached != 0) {\n    var propslist = {};\n\n    if (localStorage.getItem('minutes')) {\n      var propslist = {\n        seconds: localStorage.getItem('seconds'),\n        hours: localStorage.getItem('hours'),\n        minutes: localStorage.getItem('minutes')\n      };\n    } else {\n      var propslist = {\n        seconds: 0,\n        hours: 0,\n        minutes: props.settings.breakDurationDefaulttplusCached\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PomodoRoTimer, {\n          props: propslist,\n          pomodoroTimerKiller: pomodoroTimerKiller\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopCurrentSession,\n          children: \"Stop current short break\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this); //return (<div>\n      //<PomodoRoTimer props={propslist}  pomodoroTimerKiller={pomodoroTimerKiller} ></PomodoRoTimer>\n      //<button onClick={stopCurrentSession}>\n      //   Stop current short break</button></div>)\n    }\n  } else {\n    var propslist = {};\n\n    if (localStorage.getItem('minutes')) {\n      var propslist = {\n        seconds: localStorage.getItem('seconds'),\n        hours: localStorage.getItem('hours'),\n        minutes: localStorage.getItem('minutes')\n      };\n    } else {\n      var propslist = {\n        seconds: 0,\n        hours: 0,\n        minutes: props.settings.longBreakDurationDefaultplusCached\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PomodoRoTimer, {\n          props: propslist,\n          pomodoroTimerKiller: pomodoroTimerKiller\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopCurrentSession,\n          children: \"Stop current Long break\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this);\n    }\n  }\n};\n\n_c = PomodoroBreakInProgress;\nexport default PomodoroBreakInProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"PomodoroBreakInProgress\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/countdown_phases/PomodoroBreakInProgress.js"],"names":["React","useEffect","PomodoRoTimer","CacheCleaner","cloneDeep","PomodoroBreakInProgress","props","stopCurrentSession","nextStateName","changePomodoroViewState","pomodoroTimerKiller","numberofsessions","settings","frequencyLongBreakDefaultplusCached","propslist","localStorage","getItem","seconds","hours","minutes","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AACE,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AACzC,QAAMC,kBAAkB,GAAIC,aAAD,IAAmB;AAC5CF,IAAAA,KAAK,CAACG,uBAAN,CAA8BH,KAAK,CAACE,aAApC;AACD,GAFD;;AAGA,QAAME,mBAAmB,GAAIF,aAAD,IAAoB;AAC9CF,IAAAA,KAAK,CAACG,uBAAN,CAA8BH,KAAK,CAACE,aAApC;AACAL,IAAAA,YAAY,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAD,CAAZ;AACD,GAHD;;AAKC,MAAIG,KAAK,CAACK,gBAAN,GAAyBL,KAAK,CAACM,QAAN,CAAeC,mCAAxC,IAA+E,CAAnF,EAAqF;AACnF,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACpC,UAAIF,SAAS,GAAG;AAACG,QAAAA,OAAO,EAAEF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAV;AAA2CE,QAAAA,KAAK,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlD;AAAiFG,QAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB;AAA1F,OAAhB;AACA,KAFD,MAGK;AACJ,UAAIF,SAAS,GAAG;AAACG,QAAAA,OAAO,EAAE,CAAV;AAAaC,QAAAA,KAAK,EAAE,CAApB;AAAuBC,QAAAA,OAAO,EAAEb,KAAK,CAACM,QAAN,CAAeQ;AAA/C,OAAhB;AAGA,0BAAQ;AAAA,gCACN,QAAC,aAAD;AAAe,UAAA,KAAK,EAAEN,SAAtB;AAAkC,UAAA,mBAAmB,EAAEJ;AAAvD;AAAA;AAAA;AAAA;AAAA,gBADM,eAEN;AAAQ,UAAA,OAAO,EAAEH,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFM;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR,CAJI,CAQN;AACE;AACA;AACC;AAEJ;AAAE,GAlBF,MAmBI;AACH,QAAIO,SAAS,GAAG,EAAhB;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACpC,UAAIF,SAAS,GAAG;AAACG,QAAAA,OAAO,EAAEF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAV;AAA2CE,QAAAA,KAAK,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlD;AAAiFG,QAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB;AAA1F,OAAhB;AACA,KAFD,MAGK;AACJ,UAAIF,SAAS,GAAG;AAACG,QAAAA,OAAO,EAAE,CAAV;AAAaC,QAAAA,KAAK,EAAE,CAApB;AAAuBC,QAAAA,OAAO,EAAEb,KAAK,CAACM,QAAN,CAAeS;AAA/C,OAAhB;AAED,0BAAQ;AAAA,gCACN,QAAC,aAAD;AAAe,UAAA,KAAK,EAAEP,SAAtB;AAAkC,UAAA,mBAAmB,EAAEJ;AAAvD;AAAA;AAAA;AAAA;AAAA,gBADM,eAEN;AAAQ,UAAA,OAAO,EAAEH,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFM;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAKD;AAEF;AACA,CA5CD;;KAAMF,uB;AA8CR,eAAeA,uBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PomodoRoTimer from \"../../pomodorotimer/pomodoroTimer\"\nimport CacheCleaner from '../../../../helperfunctions/CacheCleaner';\nimport cloneDeep from 'lodash/cloneDeep';\n  const PomodoroBreakInProgress = (props) => {\n    const stopCurrentSession = (nextStateName) => {\n      props.changePomodoroViewState(props.nextStateName)\n    }\n    const pomodoroTimerKiller = (nextStateName)  => {\n      props.changePomodoroViewState(props.nextStateName);\n      CacheCleaner([\"minutes\", \"seconds\", \"hours\"])\n    }\n   \n     if (props.numberofsessions % props.settings.frequencyLongBreakDefaultplusCached != 0){\n       var propslist = {}\n       if (localStorage.getItem('minutes')) {\n        var propslist = {seconds: localStorage.getItem('seconds'), hours: localStorage.getItem('hours'), minutes: localStorage.getItem('minutes')}\n       }\n       else {\n        var propslist = {seconds: 0, hours: 0, minutes: props.settings.breakDurationDefaulttplusCached\n        }\n       \n        return (<div>\n          <PomodoRoTimer props={propslist}  pomodoroTimerKiller={pomodoroTimerKiller} ></PomodoRoTimer>\n          <button onClick={stopCurrentSession}>\n              Stop current short break</button></div>)\n      //return (<div>\n        //<PomodoRoTimer props={propslist}  pomodoroTimerKiller={pomodoroTimerKiller} ></PomodoRoTimer>\n        //<button onClick={stopCurrentSession}>\n         //   Stop current short break</button></div>)\n\n    } }\n    else {\n      var propslist = {}\n      if (localStorage.getItem('minutes')) {\n       var propslist = {seconds: localStorage.getItem('seconds'), hours: localStorage.getItem('hours'), minutes: localStorage.getItem('minutes')}\n      }\n      else {\n       var propslist = {seconds: 0, hours: 0, minutes: props.settings.longBreakDurationDefaultplusCached\n       }\n      return (<div>\n        <PomodoRoTimer props={propslist}  pomodoroTimerKiller={pomodoroTimerKiller} ></PomodoRoTimer>\n        <button onClick={stopCurrentSession}>\n            Stop current Long break</button></div>)\n\n    }\n  \n  }\n  }\n\nexport default PomodoroBreakInProgress;\n"]},"metadata":{},"sourceType":"module"}