{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport PomodoRoTimer from '../pomodorotimer/pomodoroTimer';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 25;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 5;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 4;\n  const hours = localStorage.getItem('hours') || 0;\n  const minutes = localStorage.getItem('minutes') || sessionDurationFromSettingsComponent;\n  const seconds = localStorage.getItem('seconds') || 0; // updates pomodoro minutes value if changed by settings component\n\n  React.useEffect(() => {\n    const minutes = sessionDurationFromSettingsComponent;\n  }, [sessionDurationFromSettingsComponent]);\n\n  const cacheBooleanToString = () => {\n    switch (localStorage.getItem('ispaused')) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n    }\n  };\n\n  const [paused, setPaused] = useState(true);\n  const [startSession, setStartSession] = useState(false);\n  const [sessionCompleted, setsSssionCompleted] = useState(false); // saves times data to cache\n  // counts  number of completed sessions\n  //useEffect(() => {\n  // if (sessionCompleted) {\n  //  setsSssionCompleted(numberofSessions + 1 )\n  //}\n  //}, [sessionCompleted]);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const makeStartSession = () => {\n    setPaused(!paused);\n    localStorage.setItem('ispaused', !paused);\n  };\n\n  const closeModal = () => {\n    setPaused(!paused);\n    console.log(\"trying to go back from nodal\");\n    setIsOpen(!isOpen);\n    localStorage.setItem('ispaused', !paused);\n  };\n\n  const makeStop = () => {\n    setIsOpen(!isOpen);\n  };\n\n  function toggleModal() {\n    console.log(\"trying to close nodal\");\n    setIsOpen(!isOpen);\n  }\n\n  const propsdata = {\n    hours,\n    minutes,\n    seconds,\n    paused,\n    sessionCompleted\n  };\n  React.useEffect(() => {\n    localStorage.setItem('hours', hours);\n    localStorage.setItem('minutes', minutes);\n    localStorage.setItem('seconds', seconds);\n  }, [hours, minutes, seconds]);\n\n  const StartSession = () => {\n    if (props.SelectedOptionIssue != undefined && paused == false && (hours == 0, minutes == 0, seconds == 0)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Time for a break!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 12\n      }, this);\n    }\n\n    if (props.SelectedOptionIssue != undefined && paused == false) {\n      setStartSession(true);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PomodoRoTimer, {\n          propsdata: propsdata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: makeStop,\n          children: \"Stop current session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: isOpen,\n          onRequestClose: toggleModal,\n          contentLabel: \"My dialog2\",\n          className: \"mymodal\",\n          overlayClassName: \"myoverlay\",\n          closeTimeoutMS: 500,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeModal,\n            children: \"Are you sure? \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: makeStop,\n            children: \"go back to pomodoro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 61\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this);\n    }\n\n    if (props.SelectedOptionIssue != undefined) {\n      setStartSession(true);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: makeStartSession,\n          children: \"Start Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this);\n    }\n\n    if (startSession == false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select Project/issue to start the pomodoro session!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  React.useEffect(() => {\n    console.log(\"hello\");\n  }, [props.SelectedOptionIssue, paused]);\n\n  const SessionStatus = () => {}; //const dataToParent = {\n  //numberofSessionsCompelted: numberofSessions,\n  //}   \n  //var data = numberofSessions\n  //props.blabla(dataToParent);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 7\n  }, this);\n}; // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\n_s(CoutdownCompontent, \"+FNqTdeDborS5W7bSGCBYYbaRq0=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","PomodoRoTimer","Project","SelectedIssue","Modal","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","cacheBooleanToString","paused","setPaused","startSession","setStartSession","sessionCompleted","setsSssionCompleted","isOpen","setIsOpen","makeStartSession","setItem","closeModal","console","log","makeStop","toggleModal","propsdata","StartSession","SelectedOptionIssue","undefined","SessionStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\nimport PomodoRoTimer from '../pomodorotimer/pomodoroTimer';\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\n\r\nimport Modal from \"react-modal\";\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 25)\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 5)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 4)\r\n    const hours = localStorage.getItem('hours') || 0;\r\n    const minutes = (localStorage.getItem('minutes') ||sessionDurationFromSettingsComponent);\r\n    const seconds = (localStorage.getItem('seconds') || 0); \r\n\r\n    // updates pomodoro minutes value if changed by settings component\r\n    React.useEffect(() => {\r\n      const minutes = sessionDurationFromSettingsComponent;\r\n    }, [sessionDurationFromSettingsComponent]);\r\n\r\n    const cacheBooleanToString = () => {\r\n      switch(localStorage.getItem('ispaused')){\r\n        case \"true\":  return true\r\n        case \"false\": return false\r\n      }\r\n\r\n    }\r\n\r\n    const [paused, setPaused] = useState(true);\r\n    const [startSession, setStartSession] = useState(false);\r\n    const [sessionCompleted, setsSssionCompleted] = useState(false);\r\n\r\n\r\n\r\n    // saves times data to cache\r\n\r\n  \r\n \r\n    // counts  number of completed sessions\r\n    //useEffect(() => {\r\n     // if (sessionCompleted) {\r\n      //  setsSssionCompleted(numberofSessions + 1 )\r\n      //}\r\n    //}, [sessionCompleted]);\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const makeStartSession = () => {setPaused(!paused)\r\n      localStorage.setItem('ispaused', !paused)\r\n      \r\n  ;\r\n    }\r\n    const closeModal = () => {setPaused(!paused)\r\n      console.log(\"trying to go back from nodal\")\r\n      setIsOpen(!isOpen)\r\n      localStorage.setItem('ispaused', !paused)\r\n      \r\n  ;\r\n    }\r\n    const makeStop = () => {\r\n   \r\n      setIsOpen(!isOpen)\r\n       \r\n  ;\r\n    }\r\n   \r\n    function toggleModal() {\r\n      console.log(\"trying to close nodal\")\r\n      setIsOpen(!isOpen);\r\n    }\r\n    const propsdata = {hours, minutes, seconds, paused, sessionCompleted}\r\n    React.useEffect(() => {\r\n      localStorage.setItem('hours', hours);\r\n      localStorage.setItem('minutes', minutes);\r\n      localStorage.setItem('seconds', seconds);\r\n    }, [hours, minutes, seconds]);\r\n    \r\n    \r\n const StartSession = () => {\r\n  if ((props.SelectedOptionIssue != undefined) && (paused == false) && (hours == 0, minutes == 0, seconds == 0)) \r\n  \r\n  {\r\n    return(<div>\r\n      Time for a break!\r\n    </div>)\r\n  } \r\n  if ((props.SelectedOptionIssue != undefined) && (paused == false)) {\r\n    setStartSession(true)\r\n    return (<div>\r\n        <PomodoRoTimer propsdata={propsdata}></PomodoRoTimer>\r\n      <button onClick={makeStop}>\r\n          Stop current session\r\n          </button>\r\n          <Modal\r\n        isOpen={isOpen}\r\n        onRequestClose={toggleModal}\r\n        contentLabel=\"My dialog2\"\r\n        className=\"mymodal\"\r\n        overlayClassName=\"myoverlay\"\r\n        closeTimeoutMS={500}\r\n      >  \r\n      <button onClick={closeModal} >Are you sure? </button> <button onClick={makeStop} >go back to pomodoro</button>\r\n     \r\n      </Modal>\r\n    </div>)\r\n   } \r\n   if (props.SelectedOptionIssue != undefined) {\r\n    setStartSession(true)\r\n    return (<div>\r\n      <button onClick={makeStartSession}>\r\n          Start Session\r\n          </button>\r\n    </div>)\r\n   } \r\n\r\n   if (startSession == false) {\r\n    return (<div>\r\n      Select Project/issue to start the pomodoro session!\r\n    </div>)\r\n   }\r\n }    \r\n React.useEffect(() => {\r\n console.log(\"hello\")\r\n}, [props.SelectedOptionIssue, paused]);\r\n const SessionStatus = () => {\r\n\r\n }\r\n  \r\n  //const dataToParent = {\r\n  //numberofSessionsCompelted: numberofSessions,\r\n  //}   \r\n  //var data = numberofSessions\r\n  //props.blabla(dataToParent);\r\n\r\n    return (\r\n      <div>\r\n    <StartSession></StartSession>\r\n             </div>\r\n      \r\n\r\n    );\r\n  };\r\n   // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\r\n\r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}