{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\nimport Modal from \"react-modal\";\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 25;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 5;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 4;\n  const hours = localStorage.getItem('hours') || 0;\n  const minutes = localStorage.getItem('minutes') || sessionDurationFromSettingsComponent;\n  const seconds = localStorage.getItem('seconds') || 0; // updates pomodoro minutes value if changed by settings component\n\n  React.useEffect(() => {\n    const minutes = sessionDurationFromSettingsComponent;\n  }, [sessionDurationFromSettingsComponent]);\n\n  const cacheBooleanToString = () => {\n    switch (localStorage.getItem('ispaused')) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n    }\n  };\n\n  const [paused, setPaused] = useState(true);\n  const [pomodoroRunning, setStartPomodoro] = useState(false);\n  const [sessionCompleted, setsSessionCompleted] = useState(false); // saves times data to cache\n  // counts  number of completed sessions\n  //useEffect(() => {\n  // if (sessionCompleted) {\n  //  setsSssionCompleted(numberofSessions + 1 )\n  //}\n  //}, [sessionCompleted]);\n  // const makeStartSession = () => {setPaused(!paused)\n  //  localStorage.setItem('ispaused', !paused)\n  // ;\n  //  }\n\n  const changePomodoroStatus = () => {\n    //setPaused(!paused)\n    //localStorage.setItem('ispaused', !paused)\n    setStartPomodoro(!pomodoroRunning);\n  };\n\n  const setBreakStatus = () => {\n    //setPaused(!paused)\n    //localStorage.setItem('ispaused', !paused)\n    setsSessionCompleted(!setsSessionCompleted); //setPaused(!paused)\n    //localStorage.setItem('ispaused', paused)\n  }; //React.useEffect(() => {\n  //  localStorage.setItem('hours', hours);\n  //  localStorage.setItem('minutes', minutes);\n  //  localStorage.setItem('seconds', seconds);\n  //}, [hours, minutes, seconds]);\n\n\n  const StartSession = () => {\n    if (pomodoroRunning == true && [hours, minutes, seconds] == 0) {\n      console.log(\"it is 0.0.0\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Time for a break!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }, this);\n    }\n\n    if (pomodoroRunning == true) {\n      const propsdata = {\n        hours,\n        minutes,\n        seconds,\n        changePomodoroStatus,\n        setBreakStatus\n      };\n      return /*#__PURE__*/_jsxDEV(PomodoroActiveSession, {\n        timerdata: propsdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }, this);\n    }\n\n    if (props.SelectedOptionIssue != undefined) {\n      return /*#__PURE__*/_jsxDEV(StartNewPomodoroView, {\n        startPomodoro: changePomodoroStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (pomodoroRunning == false) {\n      return /*#__PURE__*/_jsxDEV(ProjectIssueSelectorView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this);\n    }\n  };\n\n  React.useEffect(() => {\n    console.log(\"hello\");\n  }, [props.SelectedOptionIssue, sessionCompleted]);\n\n  const SessionStatus = () => {}; //const dataToParent = {\n  //numberofSessionsCompelted: numberofSessions,\n  //}   \n  //var data = numberofSessions\n  //props.blabla(dataToParent);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 7\n  }, this);\n}; // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\n_s(CoutdownCompontent, \"evHa8Rk7NddufsddGzpPUBwbWX4=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","Project","SelectedIssue","StartNewPomodoroView","ProjectIssueSelectorView","Modal","PomodoroActiveSession","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","cacheBooleanToString","paused","setPaused","pomodoroRunning","setStartPomodoro","sessionCompleted","setsSessionCompleted","changePomodoroStatus","setBreakStatus","StartSession","console","log","propsdata","SelectedOptionIssue","undefined","SessionStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\n\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\r\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\r\nimport Modal from \"react-modal\";\r\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 25)\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 5)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 4)\r\n    const hours = localStorage.getItem('hours') || 0;\r\n    const minutes = (localStorage.getItem('minutes') ||sessionDurationFromSettingsComponent);\r\n    const seconds = (localStorage.getItem('seconds') || 0); \r\n\r\n\r\n\r\n// updates pomodoro minutes value if changed by settings component\r\n    React.useEffect(() => {\r\n      const minutes = sessionDurationFromSettingsComponent;\r\n    }, [sessionDurationFromSettingsComponent]);\r\n\r\n    const cacheBooleanToString = () => {\r\n      switch(localStorage.getItem('ispaused')){\r\n        case \"true\":  return true\r\n        case \"false\": return false\r\n      }\r\n\r\n    }\r\n    const [paused, setPaused] = useState(true);\r\n    const [pomodoroRunning, setStartPomodoro] = useState(false);\r\n    const [sessionCompleted, setsSessionCompleted] = useState(false);\r\n\r\n\r\n\r\n    // saves times data to cache\r\n    // counts  number of completed sessions\r\n    //useEffect(() => {\r\n     // if (sessionCompleted) {\r\n      //  setsSssionCompleted(numberofSessions + 1 )\r\n      //}\r\n    //}, [sessionCompleted]);\r\n\r\n\r\n   // const makeStartSession = () => {setPaused(!paused)\r\n    //  localStorage.setItem('ispaused', !paused)\r\n      \r\n // ;\r\n  //  }\r\n    const changePomodoroStatus = () => {\r\n      //setPaused(!paused)\r\n      //localStorage.setItem('ispaused', !paused)\r\n      setStartPomodoro(!pomodoroRunning)\r\n    }\r\n    const setBreakStatus = () => {\r\n      //setPaused(!paused)\r\n      //localStorage.setItem('ispaused', !paused)\r\n      setsSessionCompleted(!setsSessionCompleted)\r\n      //setPaused(!paused)\r\n      //localStorage.setItem('ispaused', paused)\r\n    }\r\n   \r\n   \r\n  \r\n   \r\n    //React.useEffect(() => {\r\n    //  localStorage.setItem('hours', hours);\r\n    //  localStorage.setItem('minutes', minutes);\r\n    //  localStorage.setItem('seconds', seconds);\r\n    //}, [hours, minutes, seconds]);\r\n    \r\n    \r\n const StartSession = () => {\r\n\r\n  if ( (pomodoroRunning == true) && ([hours, minutes, seconds] == 0)) \r\n  {\r\n    console.log(\"it is 0.0.0\")\r\n    return(<div>\r\n      Time for a break!\r\n    </div>)\r\n  } \r\n  \r\n  if ( (pomodoroRunning == true)) {\r\n    const propsdata = {hours, minutes, seconds, changePomodoroStatus , setBreakStatus}\r\n    return(<PomodoroActiveSession timerdata={propsdata}></PomodoroActiveSession>)\r\n   } \r\n   if (props.SelectedOptionIssue != undefined) {\r\n     return(\r\n    <StartNewPomodoroView startPomodoro={changePomodoroStatus}></StartNewPomodoroView>\r\n     )} \r\n   if (pomodoroRunning == false) {\r\n     return (\r\n    <ProjectIssueSelectorView></ProjectIssueSelectorView>\r\n    )}\r\n }    \r\n React.useEffect(() => {\r\n console.log(\"hello\")\r\n}, [props.SelectedOptionIssue, sessionCompleted]);\r\n const SessionStatus = () => {\r\n\r\n }\r\n  \r\n  //const dataToParent = {\r\n  //numberofSessionsCompelted: numberofSessions,\r\n  //}   \r\n  //var data = numberofSessions\r\n  //props.blabla(dataToParent);\r\n\r\n    return (\r\n      <div>\r\n    <StartSession></StartSession>\r\n             </div>\r\n      \r\n\r\n    );\r\n  };\r\n   // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\r\n\r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}