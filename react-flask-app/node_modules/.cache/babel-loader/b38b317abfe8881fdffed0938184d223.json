{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/pomodorotimer/pomodoroTimer.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PomodoRoTimer = props => {\n  _s();\n\n  const [[h, m, s], setTime] = useState([props.propsdata.hours, props.propsdata.minutes, props.propsdata.seconds]);\n  console.log([h, m, s]);\n\n  const tick = () => {\n    if (props.propsdata.paused || props.propsdata.sessionCompleted) return;\n    if (h === 0 && m === 0 && s === 0) props.propsdata.setsSssionCompleted(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s == 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 1000);\n    return () => clearInterval(timerID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.propsdata.sessionCompleted ? \"Time's up!\" : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}; // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\n_s(PomodoRoTimer, \"//cPvo20eZtbNKNBp79u4VmEkDs=\");\n\n_c = PomodoRoTimer;\nexport default PomodoRoTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PomodoRoTimer\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/pomodorotimer/pomodoroTimer.js"],"names":["React","useState","useEffect","PomodoRoTimer","props","h","m","s","setTime","propsdata","hours","minutes","seconds","console","log","tick","paused","sessionCompleted","setsSssionCompleted","timerID","setInterval","clearInterval","toString","padStart"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAM,CAAC,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAD,EAAYC,OAAZ,IAAuBP,QAAQ,CAAC,CAACG,KAAK,CAACK,SAAN,CAAgBC,KAAjB,EAAwBN,KAAK,CAACK,SAAN,CAAgBE,OAAxC,EAAiDP,KAAK,CAACK,SAAN,CAAgBG,OAAjE,CAAD,CAArC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACT,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ;;AACA,QAAMQ,IAAI,GAAG,MAAM;AAEf,QAAKX,KAAK,CAACK,SAAN,CAAgBO,MAAjB,IAA4BZ,KAAK,CAACK,SAAN,CAAgBQ,gBAAhD,EAAkE;AAClE,QAAIZ,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAjB,IAAsBC,CAAC,KAAK,CAAhC,EAAmCH,KAAK,CAACK,SAAN,CAAgBS,mBAAhB,CAAoC,IAApC,EAAnC,KACK,IAAIZ,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AAC3BC,MAAAA,OAAO,CAAC,CAACH,CAAC,GAAG,CAAL,EAAQ,EAAR,EAAY,EAAZ,CAAD,CAAP;AAED,KAHI,MAGE,IAAIE,CAAC,IAAI,CAAT,EAAY;AACjBC,MAAAA,OAAO,CAAC,CAACH,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAW,EAAX,CAAD,CAAP;AACD,KAFM,MAEA;AACLE,MAAAA,OAAO,CAAC,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,CAAD,CAAP;AACD;AACF,GAZH;;AAgBEL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,OAAO,GAAGC,WAAW,CAAC,MAAML,IAAI,EAAX,EAAe,IAAf,CAA3B;AACA,WAAO,MAAMM,aAAa,CAACF,OAAD,CAA1B;AAGD,GALQ,CAAT;AASF,sBACE;AAAA,4BAEE;AAAA,gBAAK,GAAEd,CAAC,CAACiB,QAAF,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,GAAzB,CAA8B,IAAGjB,CAAC,CACtCgB,QADqC,GAErCC,QAFqC,CAE5B,CAF4B,EAEzB,GAFyB,CAEpB,IAAGhB,CAAC,CAACe,QAAF,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,GAAzB,CAA8B;AAFrD;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,gBAAMnB,KAAK,CAACK,SAAN,CAAgBQ,gBAAhB,GAAmC,YAAnC,GAAkD;AAAxD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA3CH,C,CA4CG;;;GA5CGd,a;;KAAAA,a;AA+CN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\n\n\nconst PomodoRoTimer = (props) => {\n   \n    const [[h, m, s], setTime] = useState([props.propsdata.hours, props.propsdata.minutes, props.propsdata.seconds]);\n    console.log([h, m, s])\n    const tick = () => {\n        \n        if ((props.propsdata.paused) || props.propsdata.sessionCompleted) return;\n        if (h === 0 && m === 0 && s === 0) props.propsdata.setsSssionCompleted(true);\n        else if (m === 0 && s === 0) {\n          setTime([h - 1, 59, 59]);\n  \n        } else if (s == 0) {\n          setTime([h, m - 1, 59]);\n        } else {\n          setTime([h, m, s - 1]);\n        }\n      };\n    \n  \n    \n      useEffect(() => {\n        const timerID = setInterval(() => tick(), 1000);\n        return () => clearInterval(timerID);\n  \n  \n      });\n   \n\n\n    return (\n      <div>\n        \n        <p>{`${h.toString().padStart(2, '0')}:${m\n          .toString()\n          .padStart(2, '0')}:${s.toString().padStart(2, '0')}`}</p>\n        <div>{props.propsdata.sessionCompleted ? \"Time's up!\" : ''}</div>\n       \n       \n       \n      </div>\n      \n\n    );\n  };\n   // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\nexport default PomodoRoTimer;\n\n"]},"metadata":{},"sourceType":"module"}