{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/MainPanel.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './MainPanel.css';\nimport CoutdownCompontent from './countdown/countdown_controller/Countdown';\nimport TopMenu from './HeaderMenu/TopMenu';\nimport Project from './Project/Project';\nimport SelectedIssue from './Issue/SelectedIssue';\nimport CompletedSessionCounter from './countdown/CompletedSessionsCounter/CompletedSessionCounter';\nimport CacheCleaner from '../helperfunctions/CacheCleaner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainPanel = () => {\n  _s();\n\n  const [numberofSessions, setNumberOfSessions] = useState(localStorage.getItem('numberofSessions'));\n  const [selectedProject, setSelectedProject] = useState(localStorage.getItem('selectedProject'));\n  const [SelectedOptionIssue, setSelectedIssue] = useState(localStorage.getItem('selectedOptionIssue'));\n  const [SessionDuration, setSessionDuration] = useState();\n  useEffect(() => {\n    UpdateTicket();\n  }, [numberofSessions]);\n  useEffect(() => {\n    localStorage.setItem(\"selectedProject\", selectedProject);\n    localStorage.setItem('SelectedOptionIssue', SelectedOptionIssue);\n    localStorage.setItem('numberofSessions', numberofSessions);\n  }, [selectedProject, SelectedOptionIssue, numberofSessions]);\n  useEffect(() => {}, [selectedProject]);\n\n  async function UpdateTicket() {\n    const completedSessionData = {\n      \"issuekey\": SelectedOptionIssue,\n      \"minutes\": SessionDuration\n    };\n    const response = await fetch('/updateTicket', {\n      method: 'POST',\n      body: JSON.stringify(completedSessionData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  const incrementNumberOfCompletedPomodoro = () => {\n    setNumberOfSessions(numberofSessions + 1);\n  };\n\n  useEffect(() => {\n    const completedSessionData = {\n      \"issuekey\": SelectedOptionIssue,\n      \"minutes\": SessionDuration\n    };\n  }, [SelectedOptionIssue]); // \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainpanelcss\",\n    children: [/*#__PURE__*/_jsxDEV(TopMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoutdownCompontent, {\n      numberofSessions: numberofSessions,\n      setNumberOfSessions: incrementNumberOfCompletedPomodoro,\n      selectedProject: selectedProject,\n      SelectedOptionIssue: SelectedOptionIssue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Project, {\n      selectedProject: selectedProject,\n      setSelectedProject: setSelectedProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectedIssue, {\n      selectedProject: selectedProject,\n      selectedIssue: SelectedOptionIssue,\n      setSelectedIssue: setSelectedIssue,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompletedSessionCounter, {\n      numberofSessions: numberofSessions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPanel, \"zFBG9HxRVbhkE6ytAoRLa5SF7V8=\");\n\n_c = MainPanel;\nexport default MainPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPanel\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/MainPanel.js"],"names":["React","useState","useEffect","CoutdownCompontent","TopMenu","Project","SelectedIssue","CompletedSessionCounter","CacheCleaner","MainPanel","numberofSessions","setNumberOfSessions","localStorage","getItem","selectedProject","setSelectedProject","SelectedOptionIssue","setSelectedIssue","SessionDuration","setSessionDuration","UpdateTicket","setItem","completedSessionData","response","fetch","method","body","JSON","stringify","headers","incrementNumberOfCompletedPomodoro"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './MainPanel.css' \r\nimport CoutdownCompontent from './countdown/countdown_controller/Countdown';\r\nimport TopMenu from './HeaderMenu/TopMenu';\r\nimport Project from './Project/Project';\r\nimport SelectedIssue from './Issue/SelectedIssue'; \r\nimport CompletedSessionCounter from './countdown/CompletedSessionsCounter/CompletedSessionCounter';\r\nimport CacheCleaner from '../helperfunctions/CacheCleaner';\r\nconst MainPanel = () => {\r\n\r\nconst [numberofSessions, setNumberOfSessions] = useState(localStorage.getItem('numberofSessions'))\r\nconst [selectedProject, setSelectedProject] = useState(localStorage.getItem('selectedProject'))\r\nconst [SelectedOptionIssue, setSelectedIssue] = useState(localStorage.getItem('selectedOptionIssue'));\r\nconst [SessionDuration, setSessionDuration] = useState();\r\n\r\nuseEffect(() => {\r\n   UpdateTicket()\r\n  }, [numberofSessions]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"selectedProject\", selectedProject)\r\n    localStorage.setItem('SelectedOptionIssue', SelectedOptionIssue)\r\n    localStorage.setItem('numberofSessions', numberofSessions)\r\n   }, [selectedProject, SelectedOptionIssue, numberofSessions]);\r\n  useEffect(() => {\r\n\r\n   }, [selectedProject]);\r\n\r\n  async function UpdateTicket() {\r\n    const completedSessionData = {\r\n      \"issuekey\": SelectedOptionIssue, \r\n      \"minutes\": SessionDuration\r\n      }\r\n    const response = await fetch('/updateTicket', {\r\n      method: 'POST',\r\n      body:   JSON.stringify(completedSessionData),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  const incrementNumberOfCompletedPomodoro = () => {\r\n    setNumberOfSessions(numberofSessions + 1)\r\n  }\r\n  useEffect(() => {\r\n    const completedSessionData = {\r\n      \"issuekey\": SelectedOptionIssue, \r\n      \"minutes\": SessionDuration\r\n      }\r\n    \r\n      \r\n    }, [SelectedOptionIssue]);\r\n// \r\n  return (\r\n    <div className='mainpanelcss'>\r\n      <TopMenu></TopMenu>\r\n      <CoutdownCompontent numberofSessions={numberofSessions} setNumberOfSessions={incrementNumberOfCompletedPomodoro} selectedProject={selectedProject} SelectedOptionIssue={SelectedOptionIssue}>\r\n </CoutdownCompontent>\r\n      <Project selectedProject={selectedProject} setSelectedProject={setSelectedProject}></Project>\r\n      <SelectedIssue selectedProject={selectedProject} selectedIssue={SelectedOptionIssue} setSelectedIssue={setSelectedIssue}> </SelectedIssue>\r\n      <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\r\n      \r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPanel;\r\n"]},"metadata":{},"sourceType":"module"}