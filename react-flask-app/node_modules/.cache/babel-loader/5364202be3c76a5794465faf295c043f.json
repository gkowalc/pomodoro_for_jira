{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/Project/Project.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './project.css';\nimport Options from './project_options/Project_options';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Project = props => {\n  _s();\n\n  const [projectKeys, setProjectKeys] = useState([]);\n\n  function fetchProjectKeysHandler() {\n    fetch('/getAvaialbleProjectKeysNamesDictionary').then(response => response.json()).then(data => setProjectKeys(data));\n  }\n\n  ;\n  useEffect(() => {\n    fetchProjectKeysHandler();\n  }, []);\n\n  function handleChange(event) {\n    // setSelectedOption(event.target.value)\n    const selectedValue = event.target.value;\n    var key = Object.keys(projectKeys).filter(function (key) {\n      return projectKeys[key] === selectedValue;\n    })[0];\n    console.log(selectedValue);\n    console.log(key);\n    props.setSelectedProject(key);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project\",\n    children: [\"Project\", /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleChange,\n      name: \"selectList\",\n      id: \"selectList\",\n      value: props.selectedProject,\n      children: [\"\\xA0    \", /*#__PURE__*/_jsxDEV(Options, {\n        props: projectKeys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Project, \"OIXFdGe8LPFbC6P2uV0AgrHVXfs=\");\n\n_c = Project;\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/Project/Project.js"],"names":["React","useState","useEffect","Options","Project","props","projectKeys","setProjectKeys","fetchProjectKeysHandler","fetch","then","response","json","data","handleChange","event","selectedValue","target","value","key","Object","keys","filter","console","log","setSelectedProject","selectedProject"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,OAAOC,OAAP,MAAoB,mCAApB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;;AACA,WAASO,uBAAT,GAAmC;AACjCC,IAAAA,KAAK,CAAC,yCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAEDF,IAFC,CAEIG,IAAI,IACVN,cAAc,CAACM,IAAD,CAHZ;AAMG;;AAAA;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,uBAAuB;AACtB,GAFM,EAEJ,EAFI,CAAT;;AAQF,WAASM,YAAT,CAAsBC,KAAtB,EAA4B;AAC3B;AACD,UAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAnC;AAEA,QAAIC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYf,WAAZ,EAAyBgB,MAAzB,CAAgC,UAASH,GAAT,EAAc;AAAC,aAAOb,WAAW,CAACa,GAAD,CAAX,KAAqBH,aAA5B;AAA0C,KAAzF,EAA2F,CAA3F,CAAV;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACCd,IAAAA,KAAK,CAACoB,kBAAN,CAAyBN,GAAzB;AACF;;AACD,sBAEE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,uCAGE;AAAS,MAAA,QAAQ,EAAEL,YAAnB;AAAiC,MAAA,IAAI,EAAC,YAAtC;AAAmD,MAAA,EAAE,EAAC,YAAtD;AAAmE,MAAA,KAAK,EAAET,KAAK,CAACqB,eAAhF;AAAA,0CACA,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEpB;AAAhB;AAAA;AAAA;AAAA;AAAA,cADA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAUD,CAvCD;;GAAMF,O;;KAAAA,O;AAyCN,eAAeA,OAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport './project.css'\r\nimport Options from './project_options/Project_options';\r\n\r\nconst Project = (props) => {\r\n  const [projectKeys, setProjectKeys] = useState([]);\r\n  function fetchProjectKeysHandler() {\r\n    fetch('/getAvaialbleProjectKeysNamesDictionary')\r\n    .then(response => response.json())\r\n  .then(data => \r\n  setProjectKeys(data));\r\n  \r\n\r\n      };\r\n     \r\n      useEffect(() => {\r\n        fetchProjectKeysHandler();\r\n        }, []);\r\n\r\n\r\n\r\n   \r\n    \r\n    function handleChange(event){\r\n     // setSelectedOption(event.target.value)\r\n    const selectedValue = event.target.value\r\n    \r\n    var key = Object.keys(projectKeys).filter(function(key) {return projectKeys[key] === selectedValue})[0];\r\n\r\n    console.log(selectedValue)\r\n    console.log(key)\r\n     props.setSelectedProject(key)\r\n  }\r\n  return (\r\n    \r\n    <div className='project'>\r\n      Project\r\n    \r\n      <select  onChange={handleChange} name=\"selectList\" id=\"selectList\" value={props.selectedProject}>\r\n Â     <Options props={projectKeys} />\r\n</select>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"]},"metadata":{},"sourceType":"module"}