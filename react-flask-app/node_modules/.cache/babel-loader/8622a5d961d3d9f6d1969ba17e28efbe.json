{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport StartSession from './StartSession';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\nimport Modal from \"react-modal\";\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 2;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 1;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 3;\n  const hours = localStorage.getItem('hours') || 0; // const minutes = (localStorage.getItem('minutes') || sessionDurationFromSettingsComponent);\n\n  const minutes = localStorage.getItem('minutes') || 0;\n  const seconds = localStorage.getItem('seconds') || 3; // updates pomodoro minutes value if changed by settings component\n  //  React.useEffect(() => {\n  //   const minutes = sessionDurationFromSettingsComponent;\n  //  }, [sessionDurationFromSettingsComponent]);\n  //const cacheBooleanToString = () => {\n  // switch(localStorage.getItem('ispaused')){\n  //   case \"true\":  return true\n  //  case \"false\": return false\n  // }\n  //}\n\n  const [numberofsessions, setnumberofsessions] = useState(0);\n  const [numberofBreaks, setnumberofBreaks] = useState(0);\n  const [numberOfLongBreaks, setnumberOfLongBreaks] = useState(0);\n  const [pomodoroRunning, setStartPomodoro] = useState(false);\n  const [breakTimerRunning, setBreakTimerRunning] = useState(false);\n  const [currentPomodoroState, setCurrentPomodoroState] = useState(\"ProjectIssueSelectorView\");\n  useEffect(() => {\n    localStorage.setItem(currentPomodoroState);\n  }, [currentPomodoroState]);\n\n  const startPomodoroBreak = () => {\n    setBreakTimerRunning(!breakTimerRunning);\n  };\n\n  const setnumberofCompeltedBreaks = () => {\n    setnumberofBreaks(numberofBreaks + 1);\n  };\n\n  const incremenetPomodoroSession = () => {\n    setBreakTimerRunning(!breakTimerRunning);\n  };\n\n  const changePomodoroStatus = () => {\n    setStartPomodoro(!pomodoroRunning);\n  };\n\n  const changePomodoroViewState = nextTransition => {\n    setCurrentPomodoroState(nextTransition);\n  };\n\n  const timerdata = {\n    hours,\n    minutes,\n    seconds\n  };\n  const settings = {\n    sessionDurationFromSettingsComponent,\n    breakDurationDefaulttplusCached,\n    longBreakDurationDefaultplusCached,\n    frequencyLongBreakDefaultplusCached\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {\n      numberofsessions: props.numberofSessions,\n      setnumberofsessions: props.setNumberOfSessions,\n      settings: settings,\n      breakduration: breakDurationDefaulttplusCached,\n      props: timerdata,\n      changePomodoroStatus: changePomodoroStatus,\n      currentPomodoroState: currentPomodoroState,\n      changePomodoroViewState: changePomodoroViewState,\n      SelectedOptionIssue: props.SelectedOptionIssue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CoutdownCompontent, \"EVDn1m9vguoHhEe5BxoUR/XjHNA=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","StartSession","Project","SelectedIssue","StartNewPomodoroView","ProjectIssueSelectorView","Modal","PomodoroBreakView","PomodoroActiveSession","PomodoroBreakInProgress","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","numberofsessions","setnumberofsessions","numberofBreaks","setnumberofBreaks","numberOfLongBreaks","setnumberOfLongBreaks","pomodoroRunning","setStartPomodoro","breakTimerRunning","setBreakTimerRunning","currentPomodoroState","setCurrentPomodoroState","setItem","startPomodoroBreak","setnumberofCompeltedBreaks","incremenetPomodoroSession","changePomodoroStatus","changePomodoroViewState","nextTransition","timerdata","settings","numberofSessions","setNumberOfSessions","SelectedOptionIssue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\nimport StartSession from './StartSession';\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\r\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\r\nimport Modal from \"react-modal\";\r\n\r\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\r\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\r\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 2 )\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 1)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 3)\r\n    const hours = localStorage.getItem('hours') || 0;\r\n    // const minutes = (localStorage.getItem('minutes') || sessionDurationFromSettingsComponent);\r\n    const minutes = (localStorage.getItem('minutes') || 0);\r\n    \r\n    const seconds = (localStorage.getItem('seconds') || 3); \r\n\r\n\r\n// updates pomodoro minutes value if changed by settings component\r\n  //  React.useEffect(() => {\r\n   //   const minutes = sessionDurationFromSettingsComponent;\r\n  //  }, [sessionDurationFromSettingsComponent]);\r\n\r\n    //const cacheBooleanToString = () => {\r\n     // switch(localStorage.getItem('ispaused')){\r\n     //   case \"true\":  return true\r\n      //  case \"false\": return false\r\n     // }\r\n\r\n    //}\r\n \r\n    const [numberofsessions, setnumberofsessions] = useState(0);\r\n    const [numberofBreaks, setnumberofBreaks] = useState(0);\r\n    const [numberOfLongBreaks, setnumberOfLongBreaks] = useState(0);\r\n\r\n    const [pomodoroRunning, setStartPomodoro] = useState(false);\r\n  \r\n    const [breakTimerRunning, setBreakTimerRunning] = useState(false);\r\n  \r\n    const  [currentPomodoroState, setCurrentPomodoroState] = useState(\"ProjectIssueSelectorView\");\r\n\r\n    useEffect(() => {\r\n      localStorage.setItem(currentPomodoroState)},\r\n       [currentPomodoroState])\r\n\r\n    const startPomodoroBreak = () => {\r\n      setBreakTimerRunning(!breakTimerRunning)\r\n    }\r\n    const setnumberofCompeltedBreaks = () => {\r\n      setnumberofBreaks(numberofBreaks +1)\r\n    }\r\n\r\n    const incremenetPomodoroSession = () => {\r\n      setBreakTimerRunning(!breakTimerRunning)\r\n    }\r\n\r\n    const changePomodoroStatus = () => {\r\n      setStartPomodoro(!pomodoroRunning)\r\n    }\r\n    \r\n    const changePomodoroViewState = (nextTransition) => {\r\n      setCurrentPomodoroState(nextTransition)\r\n    }\r\n  \r\n const timerdata = {hours, minutes, seconds}\r\n const settings = {sessionDurationFromSettingsComponent, breakDurationDefaulttplusCached, longBreakDurationDefaultplusCached, frequencyLongBreakDefaultplusCached}\r\n \r\n return (\r\n      <div> \r\n      <StartSession \r\n      numberofsessions={props.numberofSessions}\r\n      setnumberofsessions={props.setNumberOfSessions}\r\n      \r\n      settings={settings}\r\n       breakduration={breakDurationDefaulttplusCached}\r\n       props={timerdata}\r\n       changePomodoroStatus={changePomodoroStatus}\r\n      currentPomodoroState={currentPomodoroState}\r\n      changePomodoroViewState={changePomodoroViewState} \r\n      SelectedOptionIssue={props.SelectedOptionIssue} \r\n      \r\n      ></StartSession>\r\n             </div>\r\n\r\n    );\r\n  };\r\n  \r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}