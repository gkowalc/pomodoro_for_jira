{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\nimport Modal from \"react-modal\";\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 25;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 1;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 4;\n  const hours = localStorage.getItem('hours') || 0;\n  const minutes = localStorage.getItem('minutes') || 0;\n  const seconds = localStorage.getItem('seconds') || 5; // updates pomodoro minutes value if changed by settings component\n\n  React.useEffect(() => {\n    const minutes = sessionDurationFromSettingsComponent;\n  }, [sessionDurationFromSettingsComponent]);\n\n  const cacheBooleanToString = () => {\n    switch (localStorage.getItem('ispaused')) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n    }\n  };\n\n  const [paused, setPaused] = useState(true);\n  const [pomodoroRunning, setStartPomodoro] = useState(false);\n  const [duringPomodoroBreak, setDuringPomodoroBreak] = useState(false);\n  const [breakTimerRunning, setBreakTimerRunning] = useState(false);\n  const [currentPomodoroState, setCurrentPomodoroState] = useState(\"StartNewPomodoroView\"); // saves times data to cache\n  // counts  number of completed sessions\n  //useEffect(() => {\n  // if (sessionCompleted) {\n  //  setsSssionCompleted(numberofSessions + 1 )\n  //}\n  //}, [sessionCompleted]);\n  // const makeStartSession = () => {setPaused(!paused)\n  //  localStorage.setItem('ispaused', !paused)\n  // ;\n  //  }\n\n  const startPomodoroBreak = () => {\n    setBreakTimerRunning(!breakTimerRunning);\n  };\n\n  const changePomodoroStatus = () => {\n    setStartPomodoro(!pomodoroRunning);\n  };\n\n  const setBreakStatus = () => {\n    console.log(\"break status changed\");\n    setDuringPomodoroBreak(!duringPomodoroBreak);\n  }; //React.useEffect(() => {\n  //  localStorage.setItem('hours', hours);\n  //  localStorage.setItem('minutes', minutes);\n  //  localStorage.setItem('seconds', seconds);\n  //}, [hours, minutes, seconds]);\n\n\n  const StartSession = () => {\n    switch (currentPomodoroState == x) {\n      case x = \"StartNewPomodoroView\":\n        return /*#__PURE__*/_jsxDEV(ProjectIssueSelectorView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }, this);\n    }\n\n    if (duringPomodoroBreak == true && breakTimerRunning == true) {\n      const minutes = breakDurationDefaulttplusCached;\n\n      const pomodoroTimerKiller = () => {\n        setBreakStatus();\n        startPomodoroBreak();\n        changePomodoroStatus();\n      };\n\n      const propsdata = {\n        hours,\n        minutes,\n        seconds,\n        breakTimerRunning,\n        pomodoroTimerKiller\n      };\n      return /*#__PURE__*/_jsxDEV(PomodoroBreakInProgress, {\n        timerdata: propsdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (duringPomodoroBreak == true) {\n      const breakproplist = {\n        startPomodoroBreak,\n        setBreakStatus,\n        changePomodoroStatus\n      };\n      return /*#__PURE__*/_jsxDEV(PomodoroBreakView, {\n        breakprop: breakproplist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (pomodoroRunning == true) {\n      const pomodoroTimerKiller = setBreakStatus;\n      const propsdata = {\n        hours,\n        minutes,\n        seconds,\n        changePomodoroStatus,\n        pomodoroTimerKiller\n      };\n      return /*#__PURE__*/_jsxDEV(PomodoroActiveSession, {\n        timerdata: propsdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 12\n      }, this);\n    }\n\n    if (props.SelectedOptionIssue != undefined) {\n      return /*#__PURE__*/_jsxDEV(StartNewPomodoroView, {\n        startPomodoro: changePomodoroStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (pomodoroRunning == false) {\n      return /*#__PURE__*/_jsxDEV(ProjectIssueSelectorView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this);\n    }\n  };\n\n  React.useEffect(() => {\n    console.log(\"hello\");\n  }, [props.SelectedOptionIssue, duringPomodoroBreak, breakTimerRunning]);\n\n  const SessionStatus = () => {}; //const dataToParent = {\n  //numberofSessionsCompelted: numberofSessions,\n  //}   \n  //var data = numberofSessions\n  //props.blabla(dataToParent);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 7\n  }, this);\n}; // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\n_s(CoutdownCompontent, \"n1WdM100tUjvDnSW/t+56DMMuKQ=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","Project","SelectedIssue","StartNewPomodoroView","ProjectIssueSelectorView","Modal","PomodoroBreakView","PomodoroActiveSession","PomodoroBreakInProgress","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","cacheBooleanToString","paused","setPaused","pomodoroRunning","setStartPomodoro","duringPomodoroBreak","setDuringPomodoroBreak","breakTimerRunning","setBreakTimerRunning","currentPomodoroState","setCurrentPomodoroState","startPomodoroBreak","changePomodoroStatus","setBreakStatus","console","log","StartSession","x","pomodoroTimerKiller","propsdata","breakproplist","SelectedOptionIssue","undefined","SessionStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\n\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\r\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\r\nimport Modal from \"react-modal\";\r\n\r\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\r\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\r\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 25)\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 1)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 4)\r\n    const hours = localStorage.getItem('hours') || 0;\r\n    const minutes = (localStorage.getItem('minutes') || 0);\r\n    const seconds = (localStorage.getItem('seconds') || 5); \r\n\r\n\r\n\r\n// updates pomodoro minutes value if changed by settings component\r\n    React.useEffect(() => {\r\n      const minutes = sessionDurationFromSettingsComponent;\r\n    }, [sessionDurationFromSettingsComponent]);\r\n\r\n    const cacheBooleanToString = () => {\r\n      switch(localStorage.getItem('ispaused')){\r\n        case \"true\":  return true\r\n        case \"false\": return false\r\n      }\r\n\r\n    }\r\n    const [paused, setPaused] = useState(true);\r\n    const [pomodoroRunning, setStartPomodoro] = useState(false);\r\n    const [duringPomodoroBreak, setDuringPomodoroBreak] = useState(false);\r\n    const [breakTimerRunning, setBreakTimerRunning] = useState(false);\r\n    \r\n    const  [currentPomodoroState, setCurrentPomodoroState] = useState(\"StartNewPomodoroView\");\r\n\r\n    // saves times data to cache\r\n    // counts  number of completed sessions\r\n    //useEffect(() => {\r\n     // if (sessionCompleted) {\r\n      //  setsSssionCompleted(numberofSessions + 1 )\r\n      //}\r\n    //}, [sessionCompleted]);\r\n\r\n\r\n   // const makeStartSession = () => {setPaused(!paused)\r\n    //  localStorage.setItem('ispaused', !paused)\r\n      \r\n // ;\r\n  //  }\r\n    const startPomodoroBreak = () => {\r\n      setBreakTimerRunning(!breakTimerRunning)\r\n    }\r\n\r\n    const changePomodoroStatus = () => {\r\n      setStartPomodoro(!pomodoroRunning)\r\n    }\r\n\r\n    const setBreakStatus = () => {\r\n      console.log(\"break status changed\")\r\n      setDuringPomodoroBreak(!duringPomodoroBreak)\r\n\r\n    }\r\n   \r\n   \r\n  \r\n   \r\n    //React.useEffect(() => {\r\n    //  localStorage.setItem('hours', hours);\r\n    //  localStorage.setItem('minutes', minutes);\r\n    //  localStorage.setItem('seconds', seconds);\r\n    //}, [hours, minutes, seconds]);\r\n    \r\n    \r\n const StartSession = () => {\r\n\r\n  switch(currentPomodoroState == x) {\r\n  case (x=\"StartNewPomodoroView\"):\r\n    return (\r\n      <ProjectIssueSelectorView></ProjectIssueSelectorView>\r\n      )\r\n      \r\n\r\n  }\r\n  if ( (duringPomodoroBreak == true) && (breakTimerRunning == true)) \r\n\r\n  { \r\n  const minutes =  breakDurationDefaulttplusCached\r\n  const pomodoroTimerKiller = () => {\r\n    setBreakStatus();\r\n    startPomodoroBreak();  \r\n    changePomodoroStatus();\r\n  } \r\n  const propsdata = {hours, minutes, seconds, breakTimerRunning, pomodoroTimerKiller  }\r\n  return(\r\n    <PomodoroBreakInProgress timerdata={propsdata}></PomodoroBreakInProgress>)\r\n  } \r\n  \r\n  if ( (duringPomodoroBreak == true)) \r\n         \r\n  { const  breakproplist = {startPomodoroBreak, setBreakStatus, changePomodoroStatus}\r\n \r\n  return(\r\n    <PomodoroBreakView breakprop={breakproplist}></PomodoroBreakView>)\r\n  } \r\n  \r\n  if ( (pomodoroRunning == true)) {\r\n    const pomodoroTimerKiller = setBreakStatus\r\n    const propsdata = {hours, minutes, seconds, changePomodoroStatus , pomodoroTimerKiller}\r\n    \r\n    return(<PomodoroActiveSession timerdata={propsdata}></PomodoroActiveSession>)\r\n   } \r\n   if (props.SelectedOptionIssue != undefined) {\r\n     return(\r\n    <StartNewPomodoroView startPomodoro={changePomodoroStatus}></StartNewPomodoroView>\r\n     )} \r\n   if (pomodoroRunning == false) {\r\n     return (\r\n    <ProjectIssueSelectorView></ProjectIssueSelectorView>\r\n    )}\r\n }    \r\n React.useEffect(() => {\r\n console.log(\"hello\")\r\n}, [props.SelectedOptionIssue, duringPomodoroBreak, breakTimerRunning]);\r\n const SessionStatus = () => {\r\n\r\n }\r\n  \r\n  //const dataToParent = {\r\n  //numberofSessionsCompelted: numberofSessions,\r\n  //}   \r\n  //var data = numberofSessions\r\n  //props.blabla(dataToParent);\r\n\r\n    return (\r\n      <div>\r\n    <StartSession></StartSession>\r\n             </div>\r\n      \r\n\r\n    );\r\n  };\r\n   // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\r\n\r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}