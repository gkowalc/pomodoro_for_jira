{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport PomodoRoTimer from '../pomodorotimer/pomodoroTimer';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 25;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 5;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 4;\n  const hours = 0;\n  const minutes = sessionDurationFromSettingsComponent;\n  const seconds = localStorage.getItem('seconds') || 0; // updates pomodoro minutes value if changed by settings component\n\n  React.useEffect(() => {\n    const minutes = sessionDurationFromSettingsComponent;\n  }, [sessionDurationFromSettingsComponent]);\n\n  const cacheBooleanToString = () => {\n    switch (localStorage.getItem('ispaused')) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n    }\n  };\n\n  const [paused, setPaused] = useState(cacheBooleanToString);\n  const [startSession, setStartSession] = useState(false);\n  const [sessionCompleted, setsSssionCompleted] = useState(false); // saves times data to cache\n\n  React.useEffect(() => {\n    localStorage.setItem('hours', hours);\n    localStorage.setItem('minutes', minutes);\n    localStorage.setItem('seconds', seconds);\n  }, [hours, minutes, seconds]); // counts  number of completed sessions\n  //useEffect(() => {\n  // if (sessionCompleted) {\n  //  setsSssionCompleted(numberofSessions + 1 )\n  //}\n  //}, [sessionCompleted]);\n\n  const makePause = () => {\n    setPaused(!paused);\n    localStorage.setItem('ispaused', !paused);\n  };\n\n  const StartSession = () => {\n    if (startSession == false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select Project/issue to start the pomodoro session!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this);\n    }\n\n    if (props.SelectedOptionIssue) {\n      setStartSession(true);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PomodoRoTimer, {\n          propsdata: propsdata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: makePause,\n          children: paused ? 'Resume' : 'Pause'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  const SessionStatus = () => {};\n\n  const propsdata = {\n    hours,\n    minutes,\n    seconds,\n    paused,\n    sessionCompleted\n  }; //const dataToParent = {\n  //numberofSessionsCompelted: numberofSessions,\n  //}   \n  //var data = numberofSessions\n  //props.blabla(dataToParent);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n}; // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\n\n\n_s(CoutdownCompontent, \"WgL9RkzbJs8VS+JD+ph/MKWrMk4=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","PomodoRoTimer","Project","SelectedIssue","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","cacheBooleanToString","paused","setPaused","startSession","setStartSession","sessionCompleted","setsSssionCompleted","setItem","makePause","StartSession","SelectedOptionIssue","propsdata","SessionStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\nimport PomodoRoTimer from '../pomodorotimer/pomodoroTimer';\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 25)\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 5)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 4)\r\n    const hours = 0;\r\n    const minutes = sessionDurationFromSettingsComponent;\r\n    const seconds = (localStorage.getItem('seconds') || 0); \r\n\r\n    // updates pomodoro minutes value if changed by settings component\r\n    React.useEffect(() => {\r\n      const minutes = sessionDurationFromSettingsComponent;\r\n    }, [sessionDurationFromSettingsComponent]);\r\n\r\n    const cacheBooleanToString = () => {\r\n      switch(localStorage.getItem('ispaused')){\r\n        case \"true\":  return true\r\n        case \"false\": return false\r\n      }\r\n\r\n    }\r\n\r\n    const [paused, setPaused] = useState(cacheBooleanToString);\r\n    const [startSession, setStartSession] = useState(false);\r\n    const [sessionCompleted, setsSssionCompleted] = useState(false);\r\n\r\n\r\n\r\n    // saves times data to cache\r\n    React.useEffect(() => {\r\n      localStorage.setItem('hours', hours);\r\n      localStorage.setItem('minutes', minutes);\r\n      localStorage.setItem('seconds', seconds);\r\n    }, [hours, minutes, seconds]);\r\n    \r\n  \r\n \r\n    // counts  number of completed sessions\r\n    //useEffect(() => {\r\n     // if (sessionCompleted) {\r\n      //  setsSssionCompleted(numberofSessions + 1 )\r\n      //}\r\n    //}, [sessionCompleted]);\r\n\r\n    const makePause = () => {setPaused(!paused)\r\n      localStorage.setItem('ispaused', !paused)\r\n      \r\n  ;\r\n    }\r\n\r\n const StartSession = () => {\r\n   if (startSession == false) {\r\n\r\n    return (<div>\r\n      Select Project/issue to start the pomodoro session!\r\n    </div>)\r\n\r\n   }\r\n   if (props.SelectedOptionIssue) {\r\n    setStartSession(true)\r\n    return (<div>\r\n        <PomodoRoTimer propsdata={propsdata}></PomodoRoTimer>\r\n      <button onClick={makePause}>\r\n          {paused ? 'Resume' : 'Pause'}\r\n          </button>\r\n    </div>)\r\n   } \r\n   \r\n }    \r\n\r\n const SessionStatus = () => {\r\n\r\n }\r\n  const propsdata = {hours, minutes, seconds, paused, sessionCompleted}\r\n  \r\n  //const dataToParent = {\r\n  //numberofSessionsCompelted: numberofSessions,\r\n  //}   \r\n  //var data = numberofSessions\r\n  //props.blabla(dataToParent);\r\n\r\n    return (\r\n      <div>\r\n    <StartSession></StartSession>\r\n       \r\n      </div>\r\n      \r\n\r\n    );\r\n  };\r\n   // <CompletedSessionCounter numberofSessions={numberofSessions}></CompletedSessionCounter>\r\n\r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}