{"ast":null,"code":"var _jsxFileName = \"/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './countdown.css';\nimport StartSession from './StartSession';\nimport Project from '../../Project/Project';\nimport SelectedIssue from '../../Issue/SelectedIssue';\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\nimport Modal from \"react-modal\";\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoutdownCompontent = props => {\n  _s();\n\n  // read values  from Settings component cache\n  const sessionDurationFromSettingsComponent = localStorage.getItem('sessionDuration') || 25;\n  const breakDurationDefaulttplusCached = localStorage.getItem('breakduration') || 1;\n  const longBreakDurationDefaultplusCached = localStorage.getItem('longBreakDuration') || 20;\n  const frequencyLongBreakDefaultplusCached = localStorage.getItem('frequencyLongBreak') || 4;\n  const hours = localStorage.getItem('hours') || 0;\n  const minutes = localStorage.getItem('minutes') || 0;\n  const seconds = localStorage.getItem('seconds') || 5; // updates pomodoro minutes value if changed by settings component\n\n  React.useEffect(() => {\n    const minutes = sessionDurationFromSettingsComponent;\n  }, [sessionDurationFromSettingsComponent]);\n\n  const cacheBooleanToString = () => {\n    switch (localStorage.getItem('ispaused')) {\n      case \"true\":\n        return true;\n\n      case \"false\":\n        return false;\n    }\n  };\n\n  const [pomodoroRunning, setStartPomodoro] = useState(false);\n  const [duringPomodoroBreak, setDuringPomodoroBreak] = useState(false);\n  const [breakTimerRunning, setBreakTimerRunning] = useState(false);\n  const [currentPomodoroState, setCurrentPomodoroState] = useState(\"ProjectIssueSelectorView\");\n\n  const startPomodoroBreak = () => {\n    setBreakTimerRunning(!breakTimerRunning);\n  };\n\n  const changePomodoroStatus = () => {\n    setStartPomodoro(!pomodoroRunning);\n  };\n\n  const changePomodoroViewState = nextTransition => {\n    setCurrentPomodoroState(nextTransition);\n  };\n\n  const setBreakStatus = () => {\n    console.log(\"break status changed\");\n    setDuringPomodoroBreak(!duringPomodoroBreak);\n  };\n\n  const timerdata = {\n    hours,\n    minutes,\n    seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StartSession, {\n      breakduration: breakDurationDefaulttplusCached,\n      props: timerdata,\n      changePomodoroStatus: changePomodoroStatus,\n      currentPomodoroState: currentPomodoroState,\n      changePomodoroViewState: changePomodoroViewState,\n      SelectedOptionIssue: props.SelectedOptionIssue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CoutdownCompontent, \"SVal5CORoTn/0pje2IAtKC73MvQ=\");\n\n_c = CoutdownCompontent;\nexport default CoutdownCompontent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoutdownCompontent\");","map":{"version":3,"sources":["/home/gk/Documents/pomodoro_for_jira/pomodoro_for_jira/react-flask-app/src/components/countdown/countdown_controller/Countdown.js"],"names":["React","useState","useEffect","StartSession","Project","SelectedIssue","StartNewPomodoroView","ProjectIssueSelectorView","Modal","PomodoroBreakView","PomodoroActiveSession","PomodoroBreakInProgress","CoutdownCompontent","props","sessionDurationFromSettingsComponent","localStorage","getItem","breakDurationDefaulttplusCached","longBreakDurationDefaultplusCached","frequencyLongBreakDefaultplusCached","hours","minutes","seconds","cacheBooleanToString","pomodoroRunning","setStartPomodoro","duringPomodoroBreak","setDuringPomodoroBreak","breakTimerRunning","setBreakTimerRunning","currentPomodoroState","setCurrentPomodoroState","startPomodoroBreak","changePomodoroStatus","changePomodoroViewState","nextTransition","setBreakStatus","console","log","timerdata","SelectedOptionIssue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './countdown.css'\r\nimport StartSession from './StartSession';\r\nimport Project from '../../Project/Project';\r\nimport SelectedIssue from '../../Issue/SelectedIssue';\r\nimport StartNewPomodoroView from './countdown_phases/StartNewPomodoroView';\r\nimport ProjectIssueSelectorView from './countdown_phases/InitialStateSelectProject';\r\nimport Modal from \"react-modal\";\r\n\r\nimport PomodoroBreakView from './countdown_phases/PomodoroBreakView';\r\nimport PomodoroActiveSession from './countdown_phases/PomodoroActiveSession';\r\nimport PomodoroBreakInProgress from './countdown_phases/PomodoroBreakInProgress';\r\nconst CoutdownCompontent = (props) => {\r\n // read values  from Settings component cache\r\n    const sessionDurationFromSettingsComponent = (localStorage.getItem('sessionDuration') || 25)\r\n    const breakDurationDefaulttplusCached = (localStorage.getItem('breakduration') || 1)\r\n    const longBreakDurationDefaultplusCached = (localStorage.getItem('longBreakDuration') || 20)\r\n    const frequencyLongBreakDefaultplusCached = (localStorage.getItem('frequencyLongBreak') || 4)\r\n    const hours = localStorage.getItem('hours') || 0;\r\n    const minutes = (localStorage.getItem('minutes') || 0);\r\n    const seconds = (localStorage.getItem('seconds') || 5); \r\n\r\n\r\n\r\n// updates pomodoro minutes value if changed by settings component\r\n    React.useEffect(() => {\r\n      const minutes = sessionDurationFromSettingsComponent;\r\n    }, [sessionDurationFromSettingsComponent]);\r\n\r\n    const cacheBooleanToString = () => {\r\n      switch(localStorage.getItem('ispaused')){\r\n        case \"true\":  return true\r\n        case \"false\": return false\r\n      }\r\n\r\n    }\r\n \r\n    const [pomodoroRunning, setStartPomodoro] = useState(false);\r\n    const [duringPomodoroBreak, setDuringPomodoroBreak] = useState(false);\r\n    const [breakTimerRunning, setBreakTimerRunning] = useState(false);\r\n  \r\n    const  [currentPomodoroState, setCurrentPomodoroState] = useState(\"ProjectIssueSelectorView\");\r\n\r\n    const startPomodoroBreak = () => {\r\n      setBreakTimerRunning(!breakTimerRunning)\r\n    }\r\n\r\n    const changePomodoroStatus = () => {\r\n      setStartPomodoro(!pomodoroRunning)\r\n    }\r\n    \r\n    const changePomodoroViewState = (nextTransition) => {\r\n      setCurrentPomodoroState(nextTransition)\r\n    }\r\n\r\n\r\n    const setBreakStatus = () => {\r\n      console.log(\"break status changed\")\r\n      setDuringPomodoroBreak(!duringPomodoroBreak)\r\n\r\n    }\r\n  \r\n    \r\n    \r\n \r\n\r\n  \r\n const timerdata = {hours, minutes, seconds}\r\n  return (\r\n      <div> \r\n      <StartSession breakduration={breakDurationDefaulttplusCached} props={timerdata} changePomodoroStatus={changePomodoroStatus} currentPomodoroState={currentPomodoroState} changePomodoroViewState={changePomodoroViewState} SelectedOptionIssue={props.SelectedOptionIssue} ></StartSession>\r\n    \r\n             </div>\r\n      \r\n\r\n    );\r\n  };\r\n  \r\n\r\nexport default CoutdownCompontent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}